@layout CalorieWise.UI.Components.Layout.DefaultLayout
@page "/"
@using CalorieWise.UI.Features.Authentication;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Net.Http;
@using System.Net.Http.Json;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<div style="width:400px; margin:0 auto;">
<h3>Login</h3>
    <div>
        <div class="mb-3">
            <label class="form-label" for="username">Username:</label>
            <input class="form-control" @bind="username" id="username" placeholder="Username" />
        </div>
        <div class="mb-3">
            <label class="form-label" for="password">Password:</label>
            <input class="form-control" @bind="password" id="password" type="password" placeholder="Password" />
        </div>
        <button class ="btn btn-primary" type="submit" @onclick="Login">Login</button>
    </div>
</div>

@code {
    private string username { get; set; } = String.Empty;
    private string password { get; set; } = String.Empty;
    private HttpClient httpClient = new HttpClient();
    private string baseUrl = "https://localhost:5200/api/v1"; // Your API base URL

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await ((AuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                Navigation.NavigateTo("/securepage");
            }
        }
    }

    private async Task Login()
    {
        var loginModel = new { Username = username, Password = password };
        var response = await httpClient.PostAsJsonAsync($"{baseUrl}/account/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            if (tokenResponse != null)
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", tokenResponse.Token);
                ((AuthStateProvider)AuthenticationStateProvider).NotifyUserAuthentication(tokenResponse.Token);

                // Redirect user to authenticated page
                Navigation.NavigateTo("/securepage");
            }
        }
        else
        {
            // Handle failed login
            // Example: Display error message
        }
    }

    public class TokenResponse
    {
        public string Username { get; set; }
        public string Token { get; set; }
    }
}